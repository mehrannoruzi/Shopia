// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopia.DataAccess.Ef;

namespace Shopia.Crawler.DataAccess.Ef.Migrations
{
    [DbContext(typeof(CrawlerDbContext))]
    [Migration("20200519093149_AddDescription2Post")]
    partial class AddDescription2Post
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shopia.Domain.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BioUrl")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("FolowerCount")
                        .HasColumnType("int");

                    b.Property<int>("FolowingCount")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertDateSh")
                        .HasColumnType("char(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusinessAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDateMi")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyDateSh")
                        .HasColumnType("char(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PostCount")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Username")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("PageId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("IX_Username")
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Page","Instagram");
                });

            modelBuilder.Entity("Shopia.Domain.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateMi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertDateSh")
                        .HasColumnType("char(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsAlbum")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("PageId");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasName("IX_UniqueId")
                        .HasFilter("[UniqueId] IS NOT NULL");

                    b.ToTable("Post","Instagram");
                });

            modelBuilder.Entity("Shopia.Domain.PostAsset", b =>
                {
                    b.Property<int>("PostAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dimension")
                        .HasColumnType("varchar(9)")
                        .HasMaxLength(9);

                    b.Property<string>("FileUrl")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("InsertDateMi")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertDateSh")
                        .HasColumnType("char(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("PostAssetId");

                    b.HasIndex("PostId");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasName("IX_UniqueId")
                        .HasFilter("[UniqueId] IS NOT NULL");

                    b.ToTable("PostAsset","Instagram");
                });

            modelBuilder.Entity("Shopia.Domain.Post", b =>
                {
                    b.HasOne("Shopia.Domain.Page", "Page")
                        .WithMany("Posts")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Shopia.Domain.PostAsset", b =>
                {
                    b.HasOne("Shopia.Domain.Post", "Post")
                        .WithMany("Assets")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
